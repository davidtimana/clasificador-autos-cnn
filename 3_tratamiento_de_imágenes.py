# -*- coding: utf-8 -*-
"""3 Tratamiento de imágenes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VuZ01-H8CeGTN4UpwhZDFlRyvlmGT2d4

# Cuadernillo OPENCV semana 3
Descripción: Cuadernillo de exploración de métodos incluidos dentro de la libreria OPENCV (computer vision) orientados al desarrollo de la actividad de la semana: "Hacer un collage de imágenes que incluyan 7 filtros mínimo por imagen" son 4 imagenes propias para un total de 32 imágenes dentro del collage. Se deben adicionar el uso de métodos de rotación, escalamiento de los resultados para mostrarse de manera automatica sobre el collage.

## cargue de librerias
"""

import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow

"""##Generación manual de imágenes
imagen=[filas,columnas,capas]
"""

fondo=np.zeros((200,200,1),np.uint8)
cv2_imshow(fondo)

"""fondo blanco"""

blanco=np.ones((100,100,1),np.uint8)*255
cv2_imshow(blanco)

"""gris"""

gris=np.ones((468,392,1),np.uint8)*127
cv2_imshow(gris)

"""imágenes a color"""

im=np.zeros((100,100,3),np.uint8)
im[:,:,2]=255
cv2_imshow(im)

im=np.zeros((100,100,3),np.uint8)
im[:,:,1]=255
cv2_imshow(im)

im=np.zeros((100,100,3),np.uint8)
im[:,:,0]=255
cv2_imshow(im)

im=np.zeros((100,100,3),np.uint8)
im[:,:,0]=113
im[:,:,1]=82
im[:,:,2]=4
cv2_imshow(im)

"""degradado de colores"""

degrade=np.zeros((255,255,3),np.uint8)
a=degrade.shape
for i in range(a[0]):
  for j in range(a[1]):
    degrade[i,j,0]=j
    degrade[i,j,1]=i
    degrade[i,j,2]=255-i
cv2_imshow(degrade)

"""## Operaciones con imágenes
rotación, necesito una matriz
métodos:

matriz=GetRotationMAtrix2D(centro,angulo,escala)
warpAffine(imagen,matriz)
"""

ruta='/content/drive/MyDrive/Inteligencia artificial Félix/Visión Por Computador/imagenes/ciclistas.jpg'
imagen=cv.imread(ruta)
cv2_imshow(imagen)

"""### Matriz de rotación"""

centro=(244,204)
angulo=90
escala=1
matriz=cv.getRotationMatrix2D(centro,angulo,escala)
display(matriz)

imagen_rotada=cv.warpAffine(imagen,matriz,(imagen.shape[0],imagen.shape[1]))
cv2_imshow(imagen_rotada)
#

"""###Filtros
filter2d(imagen entrada, imagen de salida, kernel)
"""

#blur
kernel=np.array([[1,1,1],[1,1,1],[1,1,1]])*1/9
imagen_filtrada=cv.filter2D(imagen,-1,kernel)
collage=np.hstack((imagen,imagen_filtrada))
cv2_imshow(collage)

#filtro1
kernel1=np.array([[1,1,1],[0,0,0],[-1,-1,-1]])
imagen_filtrada1=cv.filter2D(imagen,-1,kernel1)
collage=np.hstack((imagen,imagen_filtrada,imagen_filtrada1))
cv2_imshow(collage)

kernel2=np.array([[1,1,1],[-1,-1,-1],[0,0,0]])
imagen_filtrada2=cv.filter2D(imagen,-1,kernel2)
collage=np.hstack((imagen,imagen_filtrada,imagen_filtrada1, imagen_filtrada2))
cv2_imshow(collage)

kernel3=np.array([[-1,0,1],[-1,0,1],[-1,0,1]])
imagen_filtrada3=cv.filter2D(imagen,-1,kernel3)
collage=np.hstack((imagen,imagen_filtrada,imagen_filtrada1, imagen_filtrada2,imagen_filtrada3))
cv2_imshow(collage)

kernel4=np.array([[1,2,1],[2,8,2],[1,2,1]])*1/20
imagen_filtrada4=cv.filter2D(imagen,-1,kernel4)
collage=np.hstack((imagen,imagen_filtrada,imagen_filtrada1, imagen_filtrada2,imagen_filtrada3,imagen_filtrada4))
cv2_imshow(collage)
comp=np.vstack((imagen,imagen_filtrada4))
cv2_imshow(comp)

kernel5=np.array([[1,1,1],[1,-8,1],[1,1,1]])
imagen_filtrada5=cv.filter2D(imagen,-1,kernel5)
comp=np.vstack((imagen,imagen_filtrada5))
cv2_imshow(comp)

kernel6=np.array([[-1.1,-1.1,-1.1],[-1.1,8.8,-1.1],[-1.1,-1.1,-1.1]])
imagen_filtrada6=cv.filter2D(imagen,-1,kernel6)
comp=np.vstack((imagen,imagen_filtrada6))
cv2_imshow(comp)

