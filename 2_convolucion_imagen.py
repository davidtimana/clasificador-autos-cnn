# -*- coding: utf-8 -*-
"""2 Convolucion_imagen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aIY2KjB4aIYxmMVzYHoayepPCrkJdauQ

Filtros convolucionales

libreria OPENCV
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
ruta='/content/drive/MyDrive/Inteligencia artificial Félix/Visión Por Computador/imagenes/bigdata.jpeg'
im=cv.imread(ruta)
byn=cv.cvtColor(im,cv.COLOR_BGR2GRAY)
plt.subplot(2,1,1)
plt.imshow(im)
plt.subplot(2,1,2)
plt.imshow(byn,cmap='gray')
plt.show()
cv2_imshow(byn)
cv2_imshow(im)

from google.colab import drive
drive.mount('/content/drive')

"""Convolución"""

f,c=byn.shape
print(byn.shape)
kernel=np.array([[1,1,1],[0,0,0],[-1,-1,-1]])
res=np.zeros((f-2,c-2))
for i in range(1,f-1):
  for j in range(2,c-2):
    res[i-1,j-1]=np.sum(byn[i-1:i+2,j-1:j+2]*kernel)
plt.imshow(res)
cv2_imshow(res)
print(res.shape)

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
ruta='/content/drive/MyDrive/Inteligencia artificial Félix/Visión Por Computador/imagenes/placa.jfif'
im=cv.imread(ruta)
byn=cv.cvtColor(im,cv.COLOR_BGR2GRAY)
plt.subplot(2,1,1)
plt.imshow(im)
plt.subplot(2,1,2)
plt.imshow(byn,cmap='gray')
plt.show()
cv2_imshow(byn)
cv2_imshow(im)

f,c=byn.shape
print(byn.shape)
kernel=np.array([[1,0,-1],[1,0,-1],[1,0,-1]])
res=np.zeros((f-2,c-2))
for i in range(1,f-1):
  for j in range(2,c-2):
    res[i-1,j-1]=np.sum(byn[i-1:i+2,j-1:j+2]*kernel)
plt.imshow(res)
cv2_imshow(res)
print(res.shape)

f,c=byn.shape
print(byn.shape)
kernel=np.array([[1/9,1/9,1/9],[1/9,1/9,1/9],[1/9,1/9,1/9]])
res=np.zeros((f-2,c-2))
for i in range(1,f-1):
  for j in range(2,c-2):
    res[i-1,j-1]=np.sum(byn[i-1:i+2,j-1:j+2]*kernel)
cv2_imshow(byn)
cv2_imshow(res)
print(res.shape)

f,c=byn.shape
print(byn.shape)
kernel=np.array([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]])
res=np.zeros((f-2,c-2))
for i in range(1,f-1):
  for j in range(2,c-2):
    res[i-1,j-1]=np.sum(byn[i-1:i+2,j-1:j+2]*kernel)
cv2_imshow(byn)
cv2_imshow(res)
print(res.shape)