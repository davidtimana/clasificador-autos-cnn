# -*- coding: utf-8 -*-
"""
Evaluador de Im√°genes Personalizadas - Clasificador de Autos
Script para evaluar las 100 im√°genes personalizadas con el modelo entrenado

Este script est√° dise√±ado espec√≠ficamente para evaluar un conjunto de im√°genes
personalizadas (como las 100 im√°genes mencionadas) con el modelo CNN entrenado
en el dataset Cars196. Proporciona an√°lisis detallados, visualizaciones y
reportes completos de las predicciones.

Caracter√≠sticas principales:
- Carga autom√°tica de m√∫ltiples formatos de imagen
- Predicciones en lote con Top-5 resultados
- Generaci√≥n de reportes detallados en CSV
- Visualizaci√≥n de predicciones y estad√≠sticas
- An√°lisis de distribuci√≥n de clases y confianzas
- Evaluaci√≥n con etiquetas reales (opcional)

Autor: David Timana
Fecha: 2024
"""

# =============================================================================
# IMPORTACI√ìN DE LIBRER√çAS NECESARIAS
# =============================================================================
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
from tensorflow.keras.models import load_model
import cv2
from PIL import Image
import glob

# =============================================================================
# CONFIGURACI√ìN Y PAR√ÅMETROS
# =============================================================================
# Par√°metros de imagen (deben coincidir con el entrenamiento)
IMG_SIZE = 224  # Tama√±o de imagen usado en el entrenamiento
BATCH_SIZE = 32  # Tama√±o de lote para predicciones

# Configuraci√≥n de visualizaci√≥n
PLOT_STYLE = 'seaborn-v0_8'  # Estilo de gr√°ficos
plt.style.use(PLOT_STYLE)

def cargar_modelo_entrenado(ruta_modelo='modelo_autos_final.h5'):
    """
    Carga el modelo CNN entrenado desde un archivo .h5
    
    Esta funci√≥n carga el modelo guardado despu√©s del entrenamiento. El modelo
    debe haber sido entrenado con la misma arquitectura y par√°metros que se
    usan en este script de evaluaci√≥n.
    
    Args:
        ruta_modelo (str): Ruta al archivo del modelo (.h5)
        
    Returns:
        modelo: Modelo de Keras cargado y listo para predicciones
        None: Si hay error al cargar el modelo
    """
    try:
        print(f"üîÑ Cargando modelo desde: {ruta_modelo}")
        
        # Cargar el modelo usando Keras
        modelo = load_model(ruta_modelo)
        
        # Verificar que el modelo se carg√≥ correctamente
        print(f"‚úÖ Modelo cargado exitosamente")
        print(f"   üìä Arquitectura: {modelo.name}")
        print(f"   üî¢ Par√°metros: {modelo.count_params():,}")
        print(f"   üè∑Ô∏è  Clases de salida: {modelo.output_shape[-1]}")
        
        return modelo
        
    except FileNotFoundError:
        print(f"‚ùå Error: No se encontr√≥ el archivo '{ruta_modelo}'")
        print("   üí° Aseg√∫rate de haber ejecutado primero: python clasificador_autos_cnn.py")
        return None
        
    except Exception as e:
        print(f"‚ùå Error al cargar el modelo: {e}")
        print("   üí° Verifica que el archivo del modelo no est√© corrupto")
        return None

def cargar_imagenes_personalizadas(carpeta_imagenes):
    """
    Carga las im√°genes personalizadas desde una carpeta espec√≠fica
    
    Esta funci√≥n busca autom√°ticamente im√°genes en diferentes formatos dentro
    de la carpeta especificada, las carga, preprocesa y prepara para la evaluaci√≥n
    con el modelo CNN entrenado.
    
    Formatos soportados: JPG, JPEG, PNG, BMP, TIFF (may√∫sculas y min√∫sculas)
    
    Args:
        carpeta_imagenes (str): Ruta a la carpeta que contiene las im√°genes
        
    Returns:
        imagenes (list): Lista de arrays numpy con las im√°genes preprocesadas
        rutas_imagenes (list): Lista de rutas de las im√°genes cargadas exitosamente
    """
    print(f"üîÑ Cargando im√°genes desde: {carpeta_imagenes}")
    
    # =============================================================================
    # B√öSQUEDA DE ARCHIVOS DE IMAGEN
    # =============================================================================
    # Extensiones de imagen soportadas (formato glob)
    extensiones = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
    
    imagenes = []  # Lista para almacenar las im√°genes preprocesadas
    rutas_imagenes = []  # Lista para almacenar las rutas de las im√°genes
    
    # Buscar im√°genes con diferentes extensiones (may√∫sculas y min√∫sculas)
    for extension in extensiones:
        # Buscar archivos con extensi√≥n en min√∫sculas
        rutas = glob.glob(os.path.join(carpeta_imagenes, extension))
        # Buscar archivos con extensi√≥n en may√∫sculas
        rutas.extend(glob.glob(os.path.join(carpeta_imagenes, extension.upper())))
        rutas_imagenes.extend(rutas)
    
    # Verificar si se encontraron im√°genes
    if not rutas_imagenes:
        print("‚ùå No se encontraron im√°genes en la carpeta especificada")
        print("   üí° Verifica que la carpeta contenga archivos con extensiones: .jpg, .jpeg, .png, .bmp, .tiff")
        return [], []
    
    print(f"‚úÖ Encontradas {len(rutas_imagenes)} im√°genes")
    
    # =============================================================================
    # CARGA Y PREPROCESAMIENTO DE IM√ÅGENES
    # =============================================================================
    imagenes_cargadas = 0
    imagenes_fallidas = 0
    
    for ruta in rutas_imagenes:
        try:
            # =============================================================================
            # CARGA DE IMAGEN
            # =============================================================================
            # Cargar imagen usando Keras (m√°s eficiente que PIL para este caso)
            # target_size: Redimensionar autom√°ticamente al tama√±o requerido
            img = tf.keras.preprocessing.image.load_img(ruta, target_size=(IMG_SIZE, IMG_SIZE))
            
            # =============================================================================
            # CONVERSI√ìN A ARRAY Y NORMALIZACI√ìN
            # =============================================================================
            # Convertir imagen PIL a array numpy
            img_array = tf.keras.preprocessing.image.img_to_array(img)
            
            # Normalizar valores de p√≠xeles al rango [0, 1]
            # Esto es crucial para mantener consistencia con el entrenamiento
            img_array = img_array / 255.0
            
            # Agregar a las listas
            imagenes.append(img_array)
            imagenes_cargadas += 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al cargar imagen {os.path.basename(ruta)}: {e}")
            imagenes_fallidas += 1
    
    # =============================================================================
    # RESUMEN DE CARGA
    # =============================================================================
    print(f"üìä Resumen de carga:")
    print(f"   ‚úÖ Im√°genes cargadas exitosamente: {imagenes_cargadas}")
    print(f"   ‚ùå Im√°genes con errores: {imagenes_fallidas}")
    print(f"   üìÅ Total de archivos encontrados: {len(rutas_imagenes)}")
    
    if imagenes_cargadas == 0:
        print("‚ùå No se pudieron cargar ninguna imagen")
        return [], []
    
    return imagenes, rutas_imagenes

def predecir_lote_imagenes(modelo, imagenes, rutas_imagenes):
    """
    Predice las clases para un lote de im√°genes
    """
    if not imagenes:
        return [], []
    
    # Convertir a array numpy
    imagenes_array = np.array(imagenes)
    
    # Predicciones
    predicciones = modelo.predict(imagenes_array, verbose=1)
    
    # Obtener clases predichas y confianzas
    clases_predichas = np.argmax(predicciones, axis=1)
    confianzas = np.max(predicciones, axis=1)
    
    # Top-5 predicciones para cada imagen
    top5_indices = np.argsort(predicciones, axis=1)[:, -5:][:, ::-1]
    top5_confianzas = np.take_along_axis(predicciones, top5_indices, axis=1)
    
    return clases_predichas, confianzas, top5_indices, top5_confianzas

def crear_reporte_detallado(rutas_imagenes, clases_predichas, confianzas, top5_indices, top5_confianzas):
    """
    Crea un reporte detallado de las predicciones
    """
    # Crear DataFrame con resultados
    resultados = []
    
    for i, ruta in enumerate(rutas_imagenes):
        nombre_archivo = os.path.basename(ruta)
        
        # Top-5 predicciones
        top5_pred = top5_indices[i]
        top5_conf = top5_confianzas[i]
        
        resultado = {
            'Archivo': nombre_archivo,
            'Ruta': ruta,
            'Clase_Predicha': int(clases_predichas[i]),
            'Confianza': float(confianzas[i]),
            'Top1_Clase': int(top5_pred[0]),
            'Top1_Confianza': float(top5_conf[0]),
            'Top2_Clase': int(top5_pred[1]),
            'Top2_Confianza': float(top5_conf[1]),
            'Top3_Clase': int(top5_pred[2]),
            'Top3_Confianza': float(top5_conf[2]),
            'Top4_Clase': int(top5_pred[3]),
            'Top4_Confianza': float(top5_conf[3]),
            'Top5_Clase': int(top5_pred[4]),
            'Top5_Confianza': float(top5_conf[4])
        }
        
        resultados.append(resultado)
    
    df_resultados = pd.DataFrame(resultados)
    
    # Guardar reporte
    df_resultados.to_csv('reporte_predicciones_imagenes_personalizadas.csv', index=False)
    print("Reporte guardado como 'reporte_predicciones_imagenes_personalizadas.csv'")
    
    return df_resultados

def visualizar_predicciones(imagenes, rutas_imagenes, clases_predichas, confianzas, top5_indices, top5_confianzas, num_imagenes=20):
    """
    Visualiza las predicciones para un n√∫mero espec√≠fico de im√°genes
    """
    num_imagenes = min(num_imagenes, len(imagenes))
    
    # Crear subplots
    fig, axes = plt.subplots(4, 5, figsize=(20, 16))
    axes = axes.flatten()
    
    for i in range(num_imagenes):
        # Mostrar imagen
        axes[i].imshow(imagenes[i])
        axes[i].axis('off')
        
        # T√≠tulo con predicci√≥n
        clase_pred = clases_predichas[i]
        confianza = confianzas[i]
        nombre_archivo = os.path.basename(rutas_imagenes[i])
        
        axes[i].set_title(f'{nombre_archivo}\nClase: {clase_pred}\nConf: {confianza:.3f}', 
                         fontsize=8, pad=5)
    
    plt.tight_layout()
    plt.show()

def analizar_distribucion_clases(clases_predichas, confianzas):
    """
    Analiza la distribuci√≥n de clases predichas
    """
    # Contar frecuencias de clases
    clases_unicas, frecuencias = np.unique(clases_predichas, return_counts=True)
    
    # Crear gr√°fico de barras
    plt.figure(figsize=(15, 6))
    plt.bar(clases_unicas, frecuencias)
    plt.title('Distribuci√≥n de Clases Predichas')
    plt.xlabel('Clase')
    plt.ylabel('Frecuencia')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
    
    # Estad√≠sticas de confianza
    plt.figure(figsize=(12, 4))
    
    plt.subplot(1, 2, 1)
    plt.hist(confianzas, bins=20, alpha=0.7, color='blue')
    plt.title('Distribuci√≥n de Confianzas')
    plt.xlabel('Confianza')
    plt.ylabel('Frecuencia')
    
    plt.subplot(1, 2, 2)
    plt.boxplot(confianzas)
    plt.title('Boxplot de Confianzas')
    plt.ylabel('Confianza')
    
    plt.tight_layout()
    plt.show()
    
    # Estad√≠sticas resumidas
    print(f"\n=== ESTAD√çSTICAS DE PREDICCI√ìN ===")
    print(f"Total de im√°genes: {len(clases_predichas)}")
    print(f"Clases √∫nicas predichas: {len(clases_unicas)}")
    print(f"Confianza promedio: {np.mean(confianzas):.4f}")
    print(f"Confianza mediana: {np.median(confianzas):.4f}")
    print(f"Confianza m√≠nima: {np.min(confianzas):.4f}")
    print(f"Confianza m√°xima: {np.max(confianzas):.4f}")
    
    # Top-5 clases m√°s predichas
    indices_top5 = np.argsort(frecuencias)[-5:][::-1]
    print(f"\nTop-5 clases m√°s predichas:")
    for i, idx in enumerate(indices_top5):
        print(f"{i+1}. Clase {clases_unicas[idx]}: {frecuencias[idx]} predicciones")

def evaluar_con_etiquetas_reales(modelo, imagenes, etiquetas_reales, rutas_imagenes):
    """
    Eval√∫a el modelo si se tienen etiquetas reales para las im√°genes personalizadas
    """
    if not etiquetas_reales:
        print("No se proporcionaron etiquetas reales para evaluaci√≥n")
        return
    
    # Predicciones
    clases_predichas, confianzas, _, _ = predecir_lote_imagenes(modelo, imagenes, rutas_imagenes)
    
    # M√©tricas de evaluaci√≥n
    precision = np.mean(clases_predichas == etiquetas_reales)
    
    print(f"\n=== EVALUACI√ìN CON ETIQUETAS REALES ===")
    print(f"Precisi√≥n: {precision:.4f}")
    
    # Matriz de confusi√≥n
    cm = confusion_matrix(etiquetas_reales, clases_predichas)
    
    plt.figure(figsize=(10, 8))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title('Matriz de Confusi√≥n - Im√°genes Personalizadas')
    plt.ylabel('Etiqueta Real')
    plt.xlabel('Etiqueta Predicha')
    plt.show()
    
    # Reporte de clasificaci√≥n
    print("\nReporte de Clasificaci√≥n:")
    print(classification_report(etiquetas_reales, clases_predichas))

def main():
    """
    Funci√≥n principal para evaluar im√°genes personalizadas
    """
    print("=== EVALUADOR DE IM√ÅGENES PERSONALIZADAS ===")
    print("Clasificador de Autos - Dataset Cars196\n")
    
    # 1. Cargar modelo entrenado
    modelo = cargar_modelo_entrenado()
    if modelo is None:
        print("No se pudo cargar el modelo. Aseg√∫rate de que existe 'modelo_autos_final.h5'")
        return
    
    # 2. Especificar carpeta con im√°genes personalizadas
    carpeta_imagenes = input("Ingresa la ruta de la carpeta con tus 100 im√°genes: ").strip()
    
    if not os.path.exists(carpeta_imagenes):
        print(f"La carpeta {carpeta_imagenes} no existe")
        return
    
    # 3. Cargar im√°genes personalizadas
    imagenes, rutas_imagenes = cargar_imagenes_personalizadas(carpeta_imagenes)
    
    if not imagenes:
        print("No se pudieron cargar las im√°genes")
        return
    
    print(f"Im√°genes cargadas exitosamente: {len(imagenes)}")
    
    # 4. Realizar predicciones
    print("Realizando predicciones...")
    clases_predichas, confianzas, top5_indices, top5_confianzas = predecir_lote_imagenes(
        modelo, imagenes, rutas_imagenes
    )
    
    # 5. Crear reporte detallado
    df_resultados = crear_reporte_detallado(
        rutas_imagenes, clases_predichas, confianzas, top5_indices, top5_confianzas
    )
    
    # 6. Visualizar algunas predicciones
    print("Visualizando predicciones...")
    visualizar_predicciones(
        imagenes, rutas_imagenes, clases_predichas, confianzas, 
        top5_indices, top5_confianzas, num_imagenes=20
    )
    
    # 7. Analizar distribuci√≥n de clases
    analizar_distribucion_clases(clases_predichas, confianzas)
    
    # 8. Preguntar si hay etiquetas reales
    tiene_etiquetas = input("\n¬øTienes etiquetas reales para estas im√°genes? (s/n): ").lower().strip()
    
    if tiene_etiquetas == 's':
        print("Por favor, proporciona las etiquetas reales en el mismo orden que las im√°genes")
        # Aqu√≠ podr√≠as cargar las etiquetas desde un archivo o ingresarlas manualmente
        etiquetas_reales = []  # Cargar desde archivo o input manual
        evaluar_con_etiquetas_reales(modelo, imagenes, etiquetas_reales, rutas_imagenes)
    
    print(f"\n=== EVALUACI√ìN COMPLETADA ===")
    print(f"Se evaluaron {len(imagenes)} im√°genes personalizadas")
    print(f"Reporte guardado en: reporte_predicciones_imagenes_personalizadas.csv")

if __name__ == "__main__":
    main()
