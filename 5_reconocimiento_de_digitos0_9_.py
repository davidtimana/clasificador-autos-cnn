# -*- coding: utf-8 -*-
"""5 reconocimiento de digitos0-9 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d_l6CxK2Fsj-IzWk6Kwf2fdlHXyErrhN
"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
from tensorflow.keras.utils import to_categorical

(XTRAIN,YTRAIN),(XTEST,YTEST) = mnist.load_data()

xtrain=XTRAIN.reshape(XTRAIN.shape[0],28,28,1).astype('float32')/255
xtest=XTEST.reshape(XTEST.shape[0],28,28,1).astype('float32')/255
ytrain=to_categorical(YTRAIN,10)
ytest=to_categorical(YTEST,10)

modelo=Sequential([
    Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),
    Conv2D(64,kernel_size=(3,3),activation='relu'),
    MaxPooling2D(pool_size=(2,2)),
    Flatten(),
    Dense(128,activation='relu'),
    Dense(10,activation='softmax')
]

)

modelo.summary()

modelo.compile(optimizer='SGD',loss='categorical_crossentropy',metrics=['accuracy'])
modelo.fit(xtrain,ytrain,epochs=2,batch_size=60,validation_data=(xtest,ytest))
score=modelo.evaluate(xtest,ytest)
print('perdida:',score[0])
print('exactitud:',score[1])

n=5
im=xtest[n,:,:]
import matplotlib.pyplot as plt
plt.imshow(im)
plt.show()
print('Predicci√≥n:',modelo.predict(xtest[n,:,:].reshape(1,28,28,1)))
print('Valor real:',ytest[n])