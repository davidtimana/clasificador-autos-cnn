# -*- coding: utf-8 -*-
"""5_im√°genes_con_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17-MrH6V1h4jkkyo7D3WE0ShQEGkBsm53

#red neuronal convolucional con datos MNIST
"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist   #conjunto de imagenes por defecto mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical

# Cargar el conjunto de datos MNIST
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocesar los datos
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32') / 255
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32') / 255
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Construir el modelo de la CNN
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

"""compilar y entrenar el modelo:
Deben tener en cuenta los hiperparametros (hyperopt)
epochs, batch, size

"""

# Compilar el modelo
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Entrenar el modelo
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=1, batch_size=60)

# Evaluar el modelo
score = model.evaluate(x_test, y_test, verbose=0)
#m=model.compute_metrics(x_test,y_test)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

model.summary()
n=3654
im1=x_test[n,:,:]
import matplotlib.pyplot as plt
plt.imshow(im1)
Yprod = model.predict(im1.reshape(1,28,28,1))

print('Los valores de las neuronas de salida son: ',Yprod)
print('Se predice un:  ',Yprod.argmax(),'   deberia dar un : ',y_test[n].argmax())